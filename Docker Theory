Docker Engine - Docker engine allows us to develop,assemble,ship and run applications.docker is a container runtime and orchestration engine .
Docker uses client server architecture.
Client talks to daemon. here client is cli user who is running commands.
Daemon does all heavy work like Building, running and distributing. 
Both client and daemon communicate through Rest API by using Unix sockets and network interface.
For example : Dockerd is a daemon which manages objects like images, container,networks and volume

a) Docker Daemon - A persistent background process that manages docker images,containers,networks and storage volumes. The docker daemon constantly listens for Docker API request and processes them.
b) Docker REST API - An API used by applications to interact with Docker daemon. It can be accessed by an HTTP client.
c) Docker CLI - A command line interface for interacting docker daemon.

Docker Images
----------------
Docker images are templates for containers. They are class in OOPs language.
We can use image to create an instance of container.

When a container gets created with image template it creates Image layer which is readonly .
Later as we add the things i.e libraries then it creates container layer which is read and write layer.
When we delete the container it deletes container layer and hence base image which was read only will always be there.
So we can say container is nothing but runtime image .

Commands :
1)	To know version of docker : docker - - version 
2)	To know version of client and server : docker version (without hyphens)
3)	To know if image is available in Docker hub : docker search  <image name > , docker search centos 
4)	To know details about Linux distribution OS : cat /etc/*-release
5)  Running a docker container - docker run -itd --name nginx_prod -p 8080:80 nginx:latest
6)  List docker images - docker image ls
7)  Default data location for nginx : /usr/share/nginx/html
8) To pause container : docker pause <container name>
9) TO unpause container : docker unpause <container name>
10) To stop/remove all containers : docker stop $(docker ps -aq) , docker rm $(docker ps -aq)
11) To check memort stats : docker stats
12) docker layers : docker history nginx:latest
13) command to check which process is using more memory : ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head
14) To create image from container : docker commit <container name > <arbitrary name for image>
15) Push the image to docker hub - docker push <image name >
16) Pull docker image - docker pull <image name>
17) create zip file to save image -  docker export <container name> -o <zipname>.tar
docker export nginx_prod nginx.tar
18) docker logs <container name>
19) docker import <tar file name> <image name>
20) Apache defualt location - /var/www/html
21) Mysql default location - /var/lib/mysql

